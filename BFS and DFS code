#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Node structure for adjacency list
typedef struct Node {
    int vertex;
    struct Node* next;
} Node;

Node* adjList[MAX];
int visited[MAX];

// Add edge
void addEdge(int u, int v) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = v;
    newNode->next = adjList[u];
    adjList[u] = newNode;

    // Since undirected
    newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = u;
    newNode->next = adjList[v];
    adjList[v] = newNode;
}

// DFS recursive
void DFS(int v) {
    visited[v] = 1;
    printf("%d ", v);

    Node* temp = adjList[v];
    while (temp) {
        int adjV = temp->vertex;
        if (!visited[adjV])
            DFS(adjV);
        temp = temp->next;
    }
}

// BFS using queue
void BFS(int start) {
    int queue[MAX], front = 0, rear = 0;
    visited[start] = 1;
    queue[rear++] = start;

    while (front < rear) {
        int v = queue[front++];
        printf("%d ", v);

        Node* temp = adjList[v];
        while (temp) {
            int adjV = temp->vertex;
            if (!visited[adjV]) {
                visited[adjV] = 1;
                queue[rear++] = adjV;
            }
            temp = temp->next;
        }
    }
}

int main() {
    int vertices = 4;
    addEdge(0, 1);
    addEdge(0, 2);
    addEdge(1, 3);
    addEdge(2, 3);

    printf("DFS Traversal: ");
    for (int i = 0; i < vertices; i++) visited[i] = 0;
    DFS(0);

    printf("\nBFS Traversal: ");
    for (int i = 0; i < vertices; i++) visited[i] = 0;
    BFS(0);

    return 0;
}
