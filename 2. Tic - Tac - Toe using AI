#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define PLAYER 'X'
#define AI 'O'

char board[3][3];

// Function to initialize the board
void initBoard() {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            board[i][j] = ' ';
}

// Function to print the board
void printBoard() {
    printf("\n");
    for (int i = 0; i < 3; i++) {
        printf(" %c | %c | %c ", board[i][0], board[i][1], board[i][2]);
        if (i != 2) printf("\n---|---|---\n");
    }
    printf("\n\n");
}

// Function to check for a winner
char checkWinner() {
    // Rows, columns, diagonals
    for (int i = 0; i < 3; i++) {
        // Rows
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2])
            return board[i][0];
        // Columns
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i])
            return board[0][i];
    }

    // Diagonals
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2])
        return board[0][0];
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0])
        return board[0][2];

    return ' ';
}

// Check if the board is full
bool isMovesLeft() {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[i][j] == ' ')
                return true;
    return false;
}

// Evaluation function
int evaluate() {
    char winner = checkWinner();
    if (winner == AI)
        return +10;
    else if (winner == PLAYER)
        return -10;
    return 0;
}

// Minimax algorithm
int minimax(bool isMax) {
    int score = evaluate();

    if (score == 10 || score == -10)
        return score;

    if (!isMovesLeft())
        return 0;

    if (isMax) {
        int best = INT_MIN;
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (board[i][j] == ' ') {
                    board[i][j] = AI;
                    best = (best > minimax(false)) ? best : minimax(false);
                    board[i][j] = ' ';
                }
        return best;
    } else {
        int best = INT_MAX;
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (board[i][j] == ' ') {
                    board[i][j] = PLAYER;
                    best = (best < minimax(true)) ? best : minimax(true);
                    board[i][j] = ' ';
                }
        return best;
    }
}

// Find the best move for AI
void bestMove() {
    int bestVal = INT_MIN;
    int moveRow = -1, moveCol = -1;

    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[i][j] == ' ') {
                board[i][j] = AI;
                int moveVal = minimax(false);
                board[i][j] = ' ';

                if (moveVal > bestVal) {
                    moveRow = i;
                    moveCol = j;
                    bestVal = moveVal;
                }
            }

    board[moveRow][moveCol] = AI;
}

// Handle player move
void playerMove() {
    int row, col;
    while (true) {
        printf("Enter row and column (1-3) [row col]: ");
        scanf("%d%d", &row, &col);
        row--; col--;
        if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ') {
            board[row][col] = PLAYER;
            break;
        } else {
            printf("Invalid move! Try again.\n");
        }
    }
}

// Main game loop
int main() {
    initBoard();
    printf("Welcome to Tic Tac Toe! You are 'X', AI is 'O'\n");
    printBoard();

    while (true) {
        playerMove();
        printBoard();
        if (checkWinner() == PLAYER) {
            printf("You win!\n");
            break;
        }
        if (!isMovesLeft()) {
            printf("It's a draw!\n");
            break;
        }

        printf("AI's turn:\n");
        bestMove();
        printBoard();
        if (checkWinner() == AI) {
            printf("AI wins!\n");
            break;
        }
        if (!isMovesLeft()) {
            printf("It's a draw!\n");
            break;
        }
    }

    return 0;
}
